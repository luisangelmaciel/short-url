.app {
  position: relative;
  margin-left: auto;
  margin-right: auto;
  padding: calc(3vh + 3em + 2.5vmax) 5vmin;
  text-align: center;
  font-family: sans;
  line-height: 1;
}
.app::before {
  content: "";
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: -1;
  pointer-events: none;
  background-image: linear-gradient(#fff, #c8e0ff);
}

.header {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 10;
  overflow: hidden;
  padding-top: 3vh;
  padding-bottom: 0.25em;
  background-color: #fff;
  text-transform: uppercase;
  background: linear-gradient(#fff, #c8e0ff) 50% 0/100vw 50vh no-repeat;
  box-shadow: 0 1px 5px #aea8f3;
}

.title {
  font-size: inherit;
  font-weight: 400;
  padding-bottom: 0.75em;
}

.subtitle {
  opacity: 0.5;
  font-size: smaller;
  font-weight: inherit;
  color: #2f8393;
}
.subtitle::before, .subtitle::after {
  display: inline-block;
  padding-left: 0.5em;
  padding-right: 0.5em;
  padding-bottom: 0.25em;
}
.subtitle::before {
  content: "caught: " counter(pm-caught);
}
.subtitle::after {
  content: "seen: " counter(pm-seen);
}

.wall {
  position: relative;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(5em, 1fr));
  grid-gap: 0.5em;
}
@media (min-width: 360px) {
  .wall {
    grid-template-columns: repeat(auto-fill, minmax(15vmin, 1fr));
    grid-gap: 1vmin;
  }
}
@supports not (display: grid) {
  .wall {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
  }
}

.tile {
  position: relative;
  counter-increment: pm-counter;
}
@supports not (display: grid) {
  .tile {
    width: 15vmin;
    margin: 0.5vmin;
  }
}
.tile[data-state=caught] {
  counter-increment: pm-seen pm-caught pm-counter;
}
.tile[data-state=seen] {
  counter-increment: pm-seen pm-counter;
}
.tile::before {
  content: "";
  display: block;
  padding-bottom: 100%;
}

.pm {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  color: #fff;
}
.pm::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 2;
  transform: scale(0.9);
  background-image: url("https://images.weserv.nl/?url=//i.imgur.com/ku3aMpc.png&il");
  background-position: var(--bgp);
  background-size: 1200% 1300%;
}
.pm::after {
  content: counter(pm-counter);
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1;
  border-radius: 15%;
  color: transparent;
  font-size: calc(5vmin);
}
.tile[data-state=seen] .pm::before {
  filter: contrast(0) opacity(20%);
  mix-blend-mode: difference;
}
.tile[data-state=seen] .pm::after {
  background-color: #ccc8fd;
}
.tile[data-state=unknown] .pm::before {
  display: none;
}
.tile[data-state=unknown] .pm::after {
  background-color: #ccc8fd;
  color: inherit;
}

.close-btn {
  position: fixed;
  left: 0;
  right: 0;
  bottom: 5vmin;
  z-index: 5;
  width: 1em;
  height: 1em;
  font-size: 12vmin;
  margin-left: auto;
  margin-right: auto;
  border-radius: 50%;
  border: 0.125em solid rgba(255, 255, 255, 0.3);
  color: #2f8393;
  box-shadow: inset 0 0 0 0.03em, inset 0 0 0 0.5em rgba(255, 255, 255, 0.9), 0 0 0 0.05em rgba(0, 0, 0, 0.1);
}
.close-btn::before, .close-btn::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  width: 40%;
  height: 0.03em;
  opacity: 0.8;
  background-color: currentColor;
  transform: translate(-50%, -50%) rotate(-45deg) scaleY(1.25);
}
.close-btn::after {
  transform: translate(-50%, -50%) rotate(45deg) scaleY(1.25);
}
.close-btn:focus, .close-btn:active {
  filter: contrast(0.75);
}

.scroll-indicator {
  position: fixed;
  top: 70%;
  right: -0.4em;
  z-index: 10;
  width: 1em;
  height: 1em;
  font-size: 12vmin;
  border-radius: 50%;
  color: #2f8393;
  background-color: rgba(255, 255, 255, 0.5);
  box-shadow: 0 0 0.15em rgba(47, 131, 147, 0.6);
  cursor: pointer;
}
.scroll-indicator::before, .scroll-indicator::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 37.5%;
  width: 17.5%;
  height: 17.5%;
}
.scroll-indicator::before {
  border-top: 0.05em solid;
  border-right: 0.05em solid;
  transform: scaleX(0.9) translate(-50%, -100%) rotate(-45deg);
}
.scroll-indicator::after {
  border-left: 0.05em solid;
  border-bottom: 0.05em solid;
  transform: scaleX(0.9) translate(-50%, 0%) rotate(-45deg);
}

:root {
  box-sizing: border-box;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}
*::before, *::after {
  box-sizing: inherit;
}